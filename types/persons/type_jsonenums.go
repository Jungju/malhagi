// generated by jsonenums -type Type; DO NOT EDIT

package persons

import (
	"encoding/json"
	"fmt"
)

var (
	_TypeNameToValue = map[string]Type{
		"None": None,
		"I":    I,
		"We":   We,
		"You":  You,
		"They": They,
		"He":   He,
		"She":  She,
		"It":   It,
	}

	_TypeValueToName = map[Type]string{
		None: "None",
		I:    "I",
		We:   "We",
		You:  "You",
		They: "They",
		He:   "He",
		She:  "She",
		It:   "It",
	}
)

func init() {
	var v Type
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TypeNameToValue = map[string]Type{
			interface{}(None).(fmt.Stringer).String(): None,
			interface{}(I).(fmt.Stringer).String():    I,
			interface{}(We).(fmt.Stringer).String():   We,
			interface{}(You).(fmt.Stringer).String():  You,
			interface{}(They).(fmt.Stringer).String(): They,
			interface{}(He).(fmt.Stringer).String():   He,
			interface{}(She).(fmt.Stringer).String():  She,
			interface{}(It).(fmt.Stringer).String():   It,
		}
	}
}

// MarshalJSON is generated so Type satisfies json.Marshaler.
func (r Type) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Type: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Type satisfies json.Unmarshaler.
func (r *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}
	v, ok := _TypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Type %q", s)
	}
	*r = v
	return nil
}

// generated by jsonenums -type Type; DO NOT EDIT

package formats

import (
	"encoding/json"
	"fmt"
)

var (
	_TypeNameToValue = map[string]Type{
		"None":     None,
		"Plain":    Plain,
		"Negative": Negative,
		"Future":   Future,
		"Question": Question,
	}

	_TypeValueToName = map[Type]string{
		None:     "None",
		Plain:    "Plain",
		Negative: "Negative",
		Future:   "Future",
		Question: "Question",
	}
)

func init() {
	var v Type
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TypeNameToValue = map[string]Type{
			interface{}(None).(fmt.Stringer).String():     None,
			interface{}(Plain).(fmt.Stringer).String():    Plain,
			interface{}(Negative).(fmt.Stringer).String(): Negative,
			interface{}(Future).(fmt.Stringer).String():   Future,
			interface{}(Question).(fmt.Stringer).String(): Question,
		}
	}
}

// MarshalJSON is generated so Type satisfies json.Marshaler.
func (r Type) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Type: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Type satisfies json.Unmarshaler.
func (r *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}
	v, ok := _TypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Type %q", s)
	}
	*r = v
	return nil
}
